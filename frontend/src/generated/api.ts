/* tslint:disable */
/* eslint-disable */
/**
 * Senrigan API
 * 監視カメラシステム Senrigan のAPI仕様
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CameraInfo
 */
export interface CameraInfo {
    /**
     * カメラの一意識別子
     * @type {string}
     * @memberof CameraInfo
     */
    'id': string;
    /**
     * カメラの表示名
     * @type {string}
     * @memberof CameraInfo
     */
    'name': string;
    /**
     * カメラデバイスのパス
     * @type {string}
     * @memberof CameraInfo
     */
    'device': string;
    /**
     * 
     * @type {CameraSettings}
     * @memberof CameraInfo
     */
    'settings': CameraSettings;
    /**
     * カメラの動作状態
     * @type {string}
     * @memberof CameraInfo
     */
    'status'?: CameraInfoStatusEnum;
}

export const CameraInfoStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Error: 'error'
} as const;

export type CameraInfoStatusEnum = typeof CameraInfoStatusEnum[keyof typeof CameraInfoStatusEnum];

/**
 * 
 * @export
 * @interface CameraSettings
 */
export interface CameraSettings {
    /**
     * フレームレート（fps）
     * @type {number}
     * @memberof CameraSettings
     */
    'fps': number;
    /**
     * 画像の幅（ピクセル）
     * @type {number}
     * @memberof CameraSettings
     */
    'width': number;
    /**
     * 画像の高さ（ピクセル）
     * @type {number}
     * @memberof CameraSettings
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface CamerasResponse
 */
export interface CamerasResponse {
    /**
     * カメラ情報の配列
     * @type {Array<CameraInfo>}
     * @memberof CamerasResponse
     */
    'cameras': Array<CameraInfo>;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * エラーの種類
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * エラーの詳細情報（開発用）
     * @type {string}
     * @memberof ErrorResponse
     */
    'details'?: string;
    /**
     * エラー発生時刻（RFC3339形式）
     * @type {string}
     * @memberof ErrorResponse
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface HealthResponse
 */
export interface HealthResponse {
    /**
     * サーバーの稼働状況
     * @type {string}
     * @memberof HealthResponse
     */
    'status': HealthResponseStatusEnum;
    /**
     * レスポンス生成時刻（RFC3339形式）
     * @type {string}
     * @memberof HealthResponse
     */
    'timestamp': string;
}

export const HealthResponseStatusEnum = {
    Healthy: 'healthy'
} as const;

export type HealthResponseStatusEnum = typeof HealthResponseStatusEnum[keyof typeof HealthResponseStatusEnum];

/**
 * 
 * @export
 * @interface ServerInfo
 */
export interface ServerInfo {
    /**
     * サーバーのリッスンホスト
     * @type {string}
     * @memberof ServerInfo
     */
    'host': string;
    /**
     * サーバーのリッスンポート
     * @type {number}
     * @memberof ServerInfo
     */
    'port': number;
}
/**
 * 
 * @export
 * @interface StatusResponse
 */
export interface StatusResponse {
    /**
     * システムの動作状態
     * @type {string}
     * @memberof StatusResponse
     */
    'status': StatusResponseStatusEnum;
    /**
     * 
     * @type {ServerInfo}
     * @memberof StatusResponse
     */
    'server': ServerInfo;
    /**
     * 設定されているカメラの台数
     * @type {number}
     * @memberof StatusResponse
     */
    'cameras': number;
    /**
     * レスポンス生成時刻（RFC3339形式）
     * @type {string}
     * @memberof StatusResponse
     */
    'timestamp': string;
}

export const StatusResponseStatusEnum = {
    Running: 'running',
    Starting: 'starting',
    Stopping: 'stopping'
} as const;

export type StatusResponseStatusEnum = typeof StatusResponseStatusEnum[keyof typeof StatusResponseStatusEnum];


/**
 * CameraApi - axios parameter creator
 * @export
 */
export const CameraApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定されたカメラのストリーミングに接続します（WebSocket）
         * @summary カメラストリーム接続
         * @param {string} cameraId カメラID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCameraStream: async (cameraId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('getCameraStream', 'cameraId', cameraId)
            const localVarPath = `/api/cameras/{cameraId}/stream`
                .replace(`{${"cameraId"}}`, encodeURIComponent(String(cameraId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 設定されているカメラの一覧を取得します
         * @summary カメラ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCameras: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cameras`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CameraApi - functional programming interface
 * @export
 */
export const CameraApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CameraApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定されたカメラのストリーミングに接続します（WebSocket）
         * @summary カメラストリーム接続
         * @param {string} cameraId カメラID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCameraStream(cameraId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCameraStream(cameraId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CameraApi.getCameraStream']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 設定されているカメラの一覧を取得します
         * @summary カメラ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCameras(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CamerasResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCameras(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CameraApi.getCameras']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CameraApi - factory interface
 * @export
 */
export const CameraApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CameraApiFp(configuration)
    return {
        /**
         * 指定されたカメラのストリーミングに接続します（WebSocket）
         * @summary カメラストリーム接続
         * @param {string} cameraId カメラID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCameraStream(cameraId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCameraStream(cameraId, options).then((request) => request(axios, basePath));
        },
        /**
         * 設定されているカメラの一覧を取得します
         * @summary カメラ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCameras(options?: RawAxiosRequestConfig): AxiosPromise<CamerasResponse> {
            return localVarFp.getCameras(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CameraApi - object-oriented interface
 * @export
 * @class CameraApi
 * @extends {BaseAPI}
 */
export class CameraApi extends BaseAPI {
    /**
     * 指定されたカメラのストリーミングに接続します（WebSocket）
     * @summary カメラストリーム接続
     * @param {string} cameraId カメラID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CameraApi
     */
    public getCameraStream(cameraId: string, options?: RawAxiosRequestConfig) {
        return CameraApiFp(this.configuration).getCameraStream(cameraId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 設定されているカメラの一覧を取得します
     * @summary カメラ一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CameraApi
     */
    public getCameras(options?: RawAxiosRequestConfig) {
        return CameraApiFp(this.configuration).getCameras(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * サーバーの稼働状況を確認します
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * サーバーの稼働状況を確認します
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * サーバーの稼働状況を確認します
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: RawAxiosRequestConfig): AxiosPromise<HealthResponse> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * サーバーの稼働状況を確認します
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthCheck(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * サーバーとカメラの詳細な状態情報を取得します
         * @summary システム状態取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration)
    return {
        /**
         * サーバーとカメラの詳細な状態情報を取得します
         * @summary システム状態取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatusApi.getStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatusApiFp(configuration)
    return {
        /**
         * サーバーとカメラの詳細な状態情報を取得します
         * @summary システム状態取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: RawAxiosRequestConfig): AxiosPromise<StatusResponse> {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * サーバーとカメラの詳細な状態情報を取得します
     * @summary システム状態取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public getStatus(options?: RawAxiosRequestConfig) {
        return StatusApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }
}



