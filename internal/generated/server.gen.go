// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// カメラ一覧取得
	// (GET /api/cameras)
	GetCameras(c *gin.Context)
	// カメラMJPEGストリーム
	// (GET /api/cameras/{cameraId}/stream)
	GetCameraStream(c *gin.Context, cameraId string)
	// カメラWebSocketストリーム
	// (GET /api/cameras/{cameraId}/ws)
	GetCameraWebSocket(c *gin.Context, cameraId string)
	// システム状態取得
	// (GET /api/status)
	GetStatus(c *gin.Context)
	// ヘルスチェック
	// (GET /health)
	HealthCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCameras operation middleware
func (siw *ServerInterfaceWrapper) GetCameras(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCameras(c)
}

// GetCameraStream operation middleware
func (siw *ServerInterfaceWrapper) GetCameraStream(c *gin.Context) {

	var err error

	// ------------- Path parameter "cameraId" -------------
	var cameraId string

	err = runtime.BindStyledParameterWithOptions("simple", "cameraId", c.Param("cameraId"), &cameraId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cameraId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCameraStream(c, cameraId)
}

// GetCameraWebSocket operation middleware
func (siw *ServerInterfaceWrapper) GetCameraWebSocket(c *gin.Context) {

	var err error

	// ------------- Path parameter "cameraId" -------------
	var cameraId string

	err = runtime.BindStyledParameterWithOptions("simple", "cameraId", c.Param("cameraId"), &cameraId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cameraId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCameraWebSocket(c, cameraId)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatus(c)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/cameras", wrapper.GetCameras)
	router.GET(options.BaseURL+"/api/cameras/:cameraId/stream", wrapper.GetCameraStream)
	router.GET(options.BaseURL+"/api/cameras/:cameraId/ws", wrapper.GetCameraWebSocket)
	router.GET(options.BaseURL+"/api/status", wrapper.GetStatus)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
}
