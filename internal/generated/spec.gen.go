// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXb2/bRBj/KuPgpZukqwDhdxODqlKHqjbjBQhF1/jqHtg+c3eZqCZL2CZooytDILoN",
	"XnSFra36J1TiP6rWD3N1l34LdGcnseNkvTDx7nJ+nuf3e/7d8+Q2aBLXJx7yOAPmbcCaq8iF6vg28Vaw",
	"LU8+JT6iHKNUhLRoMz1ijlx1eI2iFWCCV6sDa9XMVDW1s6S0QGAAvuYjYAJIKVxTv6E9qbE6tMuWAgNQ",
	"9GkLU2QB88M+zQzgo744Wf4YNbnULzAr+Wkh1ryMTqp7XUoGBsAe5hg6jVuY4WUH6SnPpUrvZzqBATzo",
	"auq+JyWl34w1WtTRU1pk7CZ18pG/XKcO7XnMeCnIPeCMtJEGLbNcDsj4JMiMvkQG6tDuJUE/enVopwEc",
	"cirvyijG7yJkveNxulZm3FTONFi/pPRzuIKQpakoCQz6ycHeJzoa81IuMIDfWnYwW5W+Xq600BcODMBa",
	"rgtTty+ll4nKKsPc0XKprgSHs5GqZ27m2Q/4FINnDGVhXApnkYco5Mi6xnvFRrHPMfGACUT8vYh+FvGJ",
	"iO+K6EjET0V8KH9Gf4p4V8S/iujbpLPV3b4nwgci3Dp/8PT8UQQMgD6Dri/9BVdrV1+fqr0xNT1Tr71l",
	"zkybtTc/kFQJdSEHJrAgR1Mcq1rLCDJOsWf3CM5niX0Rsz1JJb4j4n0Rdm4uzhcYrHLuM7NazW4qTeJW",
	"IeW46aDqdJ5Ki+JxJBby1aLNJGkfXmyu/x9BWUSs5fBxnac3PqQt5HGKJ5hig6YfMcLsXik1INcxlC89",
	"2VeqUBsu9PWejBvQL7VJ5v8Ql4GfBZRxLTEYhdqZvmhvnJ1ui+h3ET2Rl2En+WYjubtRyHp2usIwH5vY",
	"pcHjog1+vhN1d8ICVHfv4dk/6/lvI9HqvUdJG0tEp5mL8cFoxCGJEm5uWSgBd/eOks4PCn5bGTkQ4a4I",
	"O4tLS2mEk3Yswk53//D84dcF+Fki4lAxfizCAxHdEdF60j5MTu6LeFPERyI6Hk9maPnQptXdPxLhaffZ",
	"iYi+E+Hj5z/+ljy7J3N//5fuzubzr/44b68PUJcJcRD0BrA30kqHloUlEHQWCr38EjN1eNmU5b/WaJKW",
	"pxozI4Q9jmxES02Ul9YZI6WL3Ej/ryke3z7j05itdJNAao4LOVgrkBNXY1wUV7ESmaKfByJ8IsIvRLil",
	"2uZ4dDfPEhEeXGz+JMJHsqy/bCedv3uddvxCDmpdnZDD2V+fd3d25d6qMxGGlsjyVCgKTMilEAablH0N",
	"1B+OFVI2vIQ8im3oXbm2MPcK6C9ghXtggFuIslRhulKr1CRj4iMP+hiYYKZSq8zIdQvyVRWJqtVyXfU6",
	"22hEYNOvygKF8m7OAia4nt1SxHziMdXP+T0yUwuCIPg3AAD//4fr2C2JDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
